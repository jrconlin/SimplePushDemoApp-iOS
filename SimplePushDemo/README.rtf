{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\i\fs24 \cf0 APNS notes
\i0 \
\
Honestly, the whole process of building this app has made me sad. I know that \
language and format should not be barriers, but good golly this has been less than \
fun. If I'm a bit snarky in these notes, I apologize.\
\

\b Beginning
\b0 :\
Before you start, you'll need to have a few things. \
1) A Mac. Unlike just about every other mobile platform, Apple requires that \
development, certification and just about everything for iOS be done on a mac.\
I suppose it's a good way to make sure that they sell a few laptops or Minis.\
\
2) a $99/year iOS development subscription. In order to generate certificates\
or do really much of anything, you'll need to pony up. \
\
3) an iOS device (ipad/iphone) Push Notifications do not work in the emulator.\
\
Once you have that, feel free to download xCode from the Mac Store. This app\
was built in 6.1.1 and is targeted for a minimum of 8.1. I could have done extra \
work to support older versions, but this is a demo. \
\
I found <http://www.raywenderlich.com/32960/apple-push-notification-services-in-ios-6-tutorial-part-1> to be useful in describing the steps required.\
\
\

\b Certificates - Round 1\

\b0 Now that you've got xCode installed, you'll need to create a few certificates.\
Feel free to go to \
https://developer.apple.com/account/ios/certificate/certificateList.action?type=development\
Push certificates are limited to a single app. The first thing you'll need is a personal\
"iOS Development Certificate". Follow the steps to create one. \
\
You'll then need to provision an iOS App ID for your specific app. This ID must match \
the App's bundle ID. In my case, I've created a cert for "com.jrconlin" and this application\
is called SimplePushDemo, so I'd need to create a provisioning AppID called \
"com.jrconlin.SimplePushDemo". Make sure that you enable Push Notifications when \
creating the provision. You can edit the provision and add it later, but it's easiest to do\
it during creation. \
\
Save the file as "*.csr.cer" (e.g. I saved this file for my profile as "com.jrconlin.csr.cer")\
\
Once you have your AppID, you can create your iOS Provisioning Profile tied to the \
AppID \
\

\b Certificates - Round 2
\b0 \
Once you've got the certs, you'll need to export them to the remote server.\
0. In Keychain Access, Request a certificate from a Certificate Authority. For this example, I'll refer to this as "com.jrconlin.SimplePush.dev"\
1.Export the Private Key for the associated request certificate: (e.g. the Private Key for "com.jrconlin.SimplePush.dev") as a .p12 file. \
2. On developer.apple.com; under AppIDs, add a new AppID.\
3. Choose the created signing request (e.g. "com.jrconlin.SimplePush.dev")\
4. Download the created cert (e.g. as "com.jrconlin.SimplePush.dev.cer")\
5. Convert p12 to PEM file\
$ openssl pkcs12 -nocerts -in com.jrconlin.SimplePush.dev.p12 -out com.jrconlin.SimplePush.dev.key.pem\
6. Strip the password from the key (golang will not read a private key with a password)\
$ openssl rsa -in com.jrconlin.SimplePush.dev.key.pem -out com.jrconlin.SimplePush.dev.nopass.key.pem\
7 Convert the cer file to a PEM\
$ openssl x509 -inform der -in com.jrconlin.SimplePush.dev.cer -out com.jrconlin.SimplePush.dev.cer.pem\
8 Add the files to your config.toml file as\
certfile = "com.jrconlin.SimplePush.dev.cer.pem"\
keyfile = "com.jrconlin.SimplePush.dev.nopass.key.pem"\
\

\b About Notifications
\b0 \
I have not yet been able to send Notifications using frame format 2. I've checked the binary format. I have no idea why they're being accepted, but not sent through to the client. I've modified an existing PHP script to illustrate this. }