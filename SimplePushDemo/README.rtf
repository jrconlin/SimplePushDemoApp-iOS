{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\i\fs24 \cf0 APNS notes
\i0 \
\
Honestly, the whole process of building this app has made me sad. I know that \
language and format should not be barriers, but good golly this has been less than \
fun. If I'm a bit snarky in these notes, I apologize.\
\

\b Beginning
\b0 :\
Before you start, you'll need to have a few things. \
1) A Mac. Unlike just about every other mobile platform, Apple requires that \
development, certification and just about everything for iOS be done on a mac.\
I suppose it's a good way to make sure that they sell a few laptops or Minis.\
\
2) a $99/year iOS development subscription. In order to generate certificates\
or do really much of anything, you'll need to pony up. \
\
3) an iOS device (ipad/iphone) Push Notifications do not work in the emulator.\
\
Once you have that, feel free to download xCode from the Mac Store. This app\
was built in 6.1.1 and is targeted for a minimum of 8.1. I could have done extra \
work to support older versions, but this is a demo. \
\

\b Certificates - Round 1
\b0 \
Now that you've got xCode installed, you'll need to create a few certificates.\
Feel free to go to \
https://developer.apple.com/account/ios/certificate/certificateList.action?type=development\
Push certificates are limited to a single app. The first thing you'll need is a personal\
"iOS Development Certificate". Follow the steps to create one. \
\
You'll then need to provision an iOS App ID for your specific app. This ID must match \
the App's bundle ID. In my case, I've created a cert for "com.jrconlin" and this application\
is called SimplePushDemo, so I'd need to create a provisioning AppID called \
"com.jrconlin.SimplePushDemo". Make sure that you enable Push Notifications when \
creating the provision. You can edit the provision and add it later, but it's easiest to do\
it during creation. \
\
Once you have your AppID, you can create your iOS Provisioning Profile tied to the \
AppID \
\

\b Certificates - Round 2
\b0 \
Once you've got the certs, you'll need to export them to the remote server.\
\
1. Select the Application certificate you created to use APNS (e.g. "Apple Development \
IOS Push Services: com.jrconlin.SimplePushDemo")\
2. Export the certificate as "simplepush.cer" with the file format of "Certificate (.cer)"\
3. Export the certificate as "simplepush.p12" with the file format of "Personal Information Exchange (.p12)"\
4. Copy both of these newly created files to your server.\
5. Run the following commands:\
```\
openssl pkcs12 -in simplepush.p12 -nodes -out simplepush.key\
openssl x509 -inform der -in simplepush.cer -out simplepush.cert\
```\
6. In your config.toml file, use:\
```\
[propping]\
type = "apns"\
certfile = "simplepush.cert"\
keyfile = "simplepush.key"\
```\
}